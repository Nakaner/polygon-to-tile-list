/*
 * expired_tiles_list.hpp
 *
 *  Created on:  2019-09-05
 *      Author: Michael Reichert <michael.reichert@geofabrik.de>
 */

#ifndef SRC_TILE_LIST_HPP_
#define SRC_TILE_LIST_HPP_

#include <stdio.h>
#include <cstdint>
#include <string>
#include <unordered_set>

/**
 * Simple struct for the x and y index of a tile ID.
 */
struct xy_coord_t
{
    uint32_t x;
    uint32_t y;
    xy_coord_t() : x(0), y(0) {}
};

class TileList {

    uint32_t maxzoom;

    /**
     * x coordinate of the tile which has been added as last tile to the unordered set
     */
    uint32_t last_tile_x;

    /**
     * y coordinate of the tile which has been added as last tile to the unordered set
     */
    uint32_t last_tile_y;

    /**
     * manages which tiles we are interested in
     *
     * This set stores the IDs of the tiles at the maximum zoom level. We don't
     * store the IDs of the expired tiles of lower zoom levels. They are calculated
     * on the fly at the end.
     *
     * Tile IDs are converted into so-called quadkeys as used by Bing Maps.
     * https://msdn.microsoft.com/en-us/library/bb259689.aspx
     * A quadkey is generated by interleaving the x and y index in following order:
     * YXYX...
     *
     * Example:
     * x = 3 = 0b011, y = 5 = 0b101
     * results in the quadkey 0b100111.
     *
     * Bing Maps itself uses the quadkeys as a base-4 number converted to a string.
     * We interpret this IDs as simple 64-bit integers due to performance reasons.
     */
    std::unordered_set<uint64_t> m_dirty_tiles;

    /**
     * Helper method to convert a tile ID (x and y) into a quadkey
     * using bitshifts.
     *
     * Quadkeys are interleaved this way: YXYX…
     *
     * \param x x index
     * \param y y index
     * \param zoom zoom level
     * \returns quadtree ID as integer
     */
    static uint64_t xy_to_quadkey(uint32_t x, uint32_t y, uint32_t zoom);

    /**
     * Convert a quadkey into a tile ID (x and y) using bitshifts.
     *
     * Quadkeys coordinates are interleaved this way: YXYX…
     *
     * \param quadkey the quadkey to be converted
     * \param zoom zoom level
     */
    static xy_coord_t quadkey_to_xy(uint64_t quadkey, uint32_t zoom);

public:
    TileList(uint32_t maxzoom);

    /**
     * Add a single tile to the list
     *
     * \param x x index of the tile to be expired.
     * \param y y index of the tile to be expired.
     * \param suffix file suffix to add
     */
    void add_tile(uint32_t x, uint32_t y);

    void output(FILE* output_file, uint32_t minzoom, const std::string& suffix);
};



#endif /* SRC_TILE_LIST_HPP_ */
